/* tslint:disable */
/* eslint-disable */
/**
 * Smart Pointer Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * アクセストークンレスポンス
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
    /**
     * トークンタイプ
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'tokenType': string;
    /**
     * アクセストークン
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'accessToken': string;
    /**
     * TTL
     * @type {number}
     * @memberof AccessTokenResponse
     */
    'ttl': number;
}
/**
 * ルーム入室リクエスト
 * @export
 * @interface RoomJoinRequest
 */
export interface RoomJoinRequest {
    /**
     * パスコード
     * @type {string}
     * @memberof RoomJoinRequest
     */
    'passcode': string;
    /**
     * ユーザ名
     * @type {string}
     * @memberof RoomJoinRequest
     */
    'name': string;
}
/**
 * ルームレスポンス
 * @export
 * @interface RoomResponse
 */
export interface RoomResponse {
    /**
     * ルームID
     * @type {string}
     * @memberof RoomResponse
     */
    'roomId': string;
    /**
     * パスコード
     * @type {string}
     * @memberof RoomResponse
     */
    'passcode': string;
}

/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async health(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.health(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health(options?: any): AxiosPromise<void> {
            return localVarFp.health(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public health(options?: AxiosRequestConfig) {
        return HealthCheckApiFp(this.configuration).health(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoomApi - axios parameter creator
 * @export
 */
export const RoomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ルーム作成API
         * @summary ルーム作成API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ルーム入室API
         * @summary ルーム入室API
         * @param {string} roomId ルームID
         * @param {RoomJoinRequest} roomJoinRequest ルーム入室リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinRoom: async (roomId: string, roomJoinRequest: RoomJoinRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('joinRoom', 'roomId', roomId)
            // verify required parameter 'roomJoinRequest' is not null or undefined
            assertParamExists('joinRoom', 'roomJoinRequest', roomJoinRequest)
            const localVarPath = `/api/rooms/{room_id}/join`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomJoinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomApi - functional programming interface
 * @export
 */
export const RoomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)
    return {
        /**
         * ルーム作成API
         * @summary ルーム作成API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoom(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoom(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ルーム入室API
         * @summary ルーム入室API
         * @param {string} roomId ルームID
         * @param {RoomJoinRequest} roomJoinRequest ルーム入室リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinRoom(roomId: string, roomJoinRequest: RoomJoinRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinRoom(roomId, roomJoinRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomApi - factory interface
 * @export
 */
export const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomApiFp(configuration)
    return {
        /**
         * ルーム作成API
         * @summary ルーム作成API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom(options?: any): AxiosPromise<RoomResponse> {
            return localVarFp.createRoom(options).then((request) => request(axios, basePath));
        },
        /**
         * ルーム入室API
         * @summary ルーム入室API
         * @param {string} roomId ルームID
         * @param {RoomJoinRequest} roomJoinRequest ルーム入室リクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinRoom(roomId: string, roomJoinRequest: RoomJoinRequest, options?: any): AxiosPromise<AccessTokenResponse> {
            return localVarFp.joinRoom(roomId, roomJoinRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export class RoomApi extends BaseAPI {
    /**
     * ルーム作成API
     * @summary ルーム作成API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public createRoom(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).createRoom(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ルーム入室API
     * @summary ルーム入室API
     * @param {string} roomId ルームID
     * @param {RoomJoinRequest} roomJoinRequest ルーム入室リクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public joinRoom(roomId: string, roomJoinRequest: RoomJoinRequest, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).joinRoom(roomId, roomJoinRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


